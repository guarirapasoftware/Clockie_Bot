# handlers.py
from aiogram import types
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging
from config import TIMEZONE
from states import TaskStates
from globals import storage, scheduler
from keyboards import main_menu_keyboard
from utils import get_paginated_tasks, get_pagination_keyboard

logger = logging.getLogger(__name__)

DAYS_MAP = {
    '–ø–Ω': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–≤—Ç': '–≤—Ç–æ—Ä–Ω–∏–∫',
    '—Å—Ä': '—Å—Ä–µ–¥–∞',
    '—á—Ç': '—á–µ—Ç–≤–µ—Ä–≥',
    '–ø—Ç': '–ø—è—Ç–Ω–∏—Ü–∞',
    '—Å–±': '—Å—É–±–±–æ—Ç–∞',
    '–≤—Å': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

RU_DAYS = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥–∞",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü–∞",
    5: "—Å—É–±–±–æ—Ç–∞",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}


async def start(message: types.Message, state: FSMContext):
    await state.clear()
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª /start")

    user_id = message.from_user.id
    username = storage.get_username(user_id)

    if not username:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        await state.set_state(TaskStates.waiting_for_username)
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{username}</b>!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


async def set_username(message: types.Message, state: FSMContext):
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_id = message.from_user.id
    username = message.text.strip()

    storage.save_user(user_id, username)
    await message.answer(f"‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, <b>{username}</b>!", reply_markup=main_menu_keyboard())
    await state.set_state(None)


async def add_task_handler(callback: types.CallbackQuery, state: FSMContext):
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'")
    user_id = callback.from_user.id
    username = storage.get_username(user_id)

    if not username:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –º–Ω–µ!")
        await state.set_state(TaskStates.waiting_for_username)
    else:
        await callback.message.answer("üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        await state.set_state(TaskStates.waiting_for_description)


async def process_description(message: types.Message, state: FSMContext):
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")

    if not message.text:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    logger.info("üß† –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_day_and_time")
    await state.update_data(description=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–µ–Ω—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –≤—Ä–µ–º—è:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 10.06 18:00")
    await state.set_state(TaskStates.waiting_for_day_and_time)


async def process_day_and_time(message: types.Message, state: FSMContext):
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    text = message.text.strip().lower()
    now = datetime.now(TIMEZONE)
    data = await state.get_data()
    description = data.get("description")
    user_id = message.from_user.id
    username = storage.get_username(user_id)

    try:
        parts = text.split()

        if len(parts) == 1:
            time_part = parts[0]
            day_part = None
        elif len(parts) == 2:
            day_part, time_part = parts
        else:
            raise ValueError("–§–æ—Ä–º–∞—Ç: [–î–î.–ú–ú] –ß–ß:–ú–ú")

        if ':' not in time_part:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

        hours, minutes = map(int, time_part.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("–í—Ä–µ–º—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")

        task_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)

        if day_part:
            if '.' in day_part:
                day, month = map(int, day_part.split('.'))
                task_time = now.replace(day=day, month=month, hour=hours, minute=minutes, second=0, microsecond=0)
                if task_time <= now:
                    task_time = task_time.replace(year=now.year + 1)
            elif day_part[:2] in DAYS_MAP:
                day_key = day_part[:2]
                target_day_name = DAYS_MAP[day_key]
                target_weekday = list(DAYS_MAP.values()).index(target_day_name)

                days_ahead = (target_weekday - now.weekday() + 7) % 7
                if days_ahead == 0 and now.hour >= hours and now.minute >= minutes:
                    days_ahead += 7

                task_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0) + timedelta(days=days_ahead)

        elif task_time <= now:
            task_time += timedelta(days=1)

        task_id = f"{user_id}_{int(task_time.timestamp())}"

        storage.add_task(task_id, {
            "chat_id": message.chat.id,
            "description": description,
            "time": task_time
        })

        scheduler.add_reminder(task_id, task_time)

        ru_day_name = RU_DAYS.get(task_time.weekday(), "")
        ru_month_name = RU_MONTHS.get(task_time.month, "")
        formatted_date = f"{ru_day_name}, {task_time.day} {ru_month_name} {task_time.strftime('%H:%M')}"

        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {description} –Ω–∞ {formatted_date}")
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"‚è∞ –í—Ä–µ–º—è: {formatted_date}",
            reply_markup=main_menu_keyboard()
        )

    except ValueError as ve:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω—è/–≤—Ä–µ–º–µ–Ω–∏: {ve}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π:\n‚Ä¢ 14:30 (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)\n‚Ä¢ 10.06 18:00 (–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É)\n‚Ä¢ –ü–Ω 15:00 (–Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)")
    finally:
        await state.clear()


async def list_tasks_handler(callback: types.CallbackQuery, state: FSMContext):
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'")
    user_id = callback.from_user.id
    all_tasks = storage.get_all_tasks()
    tasks = [task for task in all_tasks if task["task_id"].startswith(f"{user_id}_")]

    if not tasks:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu_keyboard())
        return

    await state.update_data(tasks=tasks, page=0)
    await send_task_page(callback, tasks, 0)


async def send_task_page(callback: types.CallbackQuery, tasks, page):
    from utils import get_paginated_tasks, get_pagination_keyboard

    paginated_tasks = get_paginated_tasks(tasks, page)
    total_pages = (len(tasks) + 4) // 5

    response = "<b>üìÑ –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    for task in paginated_tasks:
        try:
            task_time = datetime.fromisoformat(task['time'])
            ru_day = RU_DAYS.get(task_time.weekday(), "")
            ru_month = RU_MONTHS.get(task_time.month, "")
            formatted_time = f"{ru_day}, {task_time.day} {ru_month} {task_time.strftime('%H:%M')}"
        except Exception:
            formatted_time = task['time']

        response += f"üìå <b>{task['description']}</b>\n"
        response += f"‚è∞ {formatted_time}\n\n"

    markup = get_pagination_keyboard(page, total_pages)
    await callback.message.answer(response, reply_markup=markup)


async def navigate_tasks(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    action, current_page = data.split('_')
    current_page = int(current_page)

    user_data = await state.get_data()
    tasks = user_data.get("tasks", [])

    if not tasks:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        return

    total_pages = (len(tasks) + 4) // 5
    new_page = current_page

    if action == "prev":
        new_page = max(0, current_page - 1)
    elif action == "next":
        new_page = min(total_pages - 1, current_page + 1)

    await callback.message.delete()
    await send_task_page(callback, tasks, new_page)


async def delete_task_prompt(callback: types.CallbackQuery, state: FSMContext):
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'")
    user_id = callback.from_user.id

    all_tasks = storage.get_all_tasks()
    tasks = [task for task in all_tasks if task["task_id"].startswith(f"{user_id}_")]

    if not tasks:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    await callback.message.answer("üóëÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(TaskStates.waiting_for_task_description)


async def delete_task_by_description(message: types.Message, state: FSMContext):
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    description_to_delete = message.text.strip()
    user_id = message.from_user.id

    all_tasks = storage.get_all_tasks()
    tasks = [task for task in all_tasks if task["task_id"].startswith(f"{user_id}_")]
    found_tasks = [t for t in tasks if t["description"].lower() == description_to_delete.lower()]

    if not found_tasks:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
        await state.clear()
        return

    deleted_count = 0
    for task in found_tasks:
        task_id = task["task_id"]
        try:
            scheduler.scheduler.remove_job(task_id)
            storage.remove_task(task_id)
            deleted_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    if deleted_count > 0:
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–¥–∞—á(–∏): ¬´{description_to_delete}¬ª", reply_markup=main_menu_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏.", reply_markup=main_menu_keyboard())

    await state.clear()


async def help_handler(callback: types.CallbackQuery | types.Message):
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚ùì –°–ø—Ä–∞–≤–∫–∞'")
    text = (
        "<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìå <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:</b>\n"
        "1. –ù–∞–∂–º–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
        "2. –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "3. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "   ‚Ä¢ –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è ‚Üí <code>14:30</code> (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)\n"
        "   ‚Ä¢ –î–∞—Ç–∞ + –≤—Ä–µ–º—è ‚Üí <code>10.06 18:00</code> (–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å)\n"
        "   ‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ + –≤—Ä–µ–º—è ‚Üí <code>–ü–Ω 15:00</code> (–±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n\n"

        "üìå <b>–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏:</b>\n"
        "–ù–∞–∂–º–∏ 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á' ‚Äî —É–≤–∏–¥–∏—à—å –∏—Ö –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ.\n"
        "–ö–Ω–æ–ø–∫–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –∏ '‚û°Ô∏è –í–ø–µ—Ä—ë–¥' –ø–æ–º–æ–≥—É—Ç –ª–∏—Å—Ç–∞—Ç—å.\n\n"

        "üìå <b>–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:</b>\n"
        "–ù–∞–∂–º–∏ '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' ‚Üí –≤–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\n\n"

        "üìå <b>–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:</b>\n"
        "‚Ä¢ <code>14:30</code> ‚Üí –°–µ–≥–æ–¥–Ω—è –≤ 14:30\n"
        "‚Ä¢ <code>10.06 18:00</code> ‚Üí 10 –∏—é–Ω—è –≤ 18:00\n"
        "‚Ä¢ <code>–ü—Ç 9:00</code> ‚Üí –ë–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞ –≤ 9:00"
    )

    if isinstance(callback, types.CallbackQuery):
        await callback.message.answer(text, reply_markup=main_menu_keyboard())
    else:
        await callback.answer(text, reply_markup=main_menu_keyboard())